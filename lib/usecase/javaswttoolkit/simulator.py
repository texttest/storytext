
import usecase.guishared
from org.eclipse import swt
import org.eclipse.swtbot.swt.finder as swtbot
from org.hamcrest.core import IsAnything
from java.lang import IndexOutOfBoundsException, IllegalStateException

class WidgetAdapter(usecase.guishared.WidgetAdapter):
    def getChildWidgets(self):
        return [] # don't use this...
        
    def getWidgetTitle(self):
        return ""
        
    def getLabel(self):
        try:
            return self.widget.getText().replace("&", "").split("\t")[0]
        except:
            return ""
        
    def isAutoGenerated(self, name):
        return True

    def getName(self):
        return ""

usecase.guishared.WidgetAdapter.adapterClass = WidgetAdapter    

def runOnUIThread(method, *args):
    class PythonVoidResult(swtbot.results.VoidResult):
        def run(self):
            method(*args)

    swtbot.finders.UIThreadRunnable.syncExec(PythonVoidResult())

class SignalEvent(usecase.guishared.GuiEvent):
    def connectRecord(self, method):
        class RecordListener(swt.widgets.Listener):
            def handleEvent(listenerSelf, e):
                method(e, self)

        eventType = getattr(swt.SWT, self.getAssociatedSignal(self.widget))
        try:
            # Three indirections: WidgetAdapter -> SWTBotMenu -> MenuItem
            runOnUIThread(self.widget.widget.widget.addListener, eventType, RecordListener())
        except: # Get 'widget is disposed' sometimes, don't know why...
            pass

    def implies(self, scriptOutput, otherEvent, *args):
        if isinstance(otherEvent, ShellCloseEvent):
            return not otherEvent.shouldRecord() # A close event when the window is closed shouldn't be used
        else:
            return False

    def generate(self, *args):
        try:
            self._generate(*args)
        except IllegalStateException:
            pass # get this on Windows for actions that close the UI. But only after the action is done :)
        


class ItemEvent(SignalEvent):    
    def _generate(self, *args):
        self.widget.click()

    @classmethod
    def getAssociatedSignal(cls, widget):
        return "Selection"


class ShellCloseEvent(SignalEvent):    
    def _generate(self, *args):
        self.widget.close()

    def shouldDelay(self):
        # Often triggered programmatically, so delay it and examine whether to record it after the next event
        return True

    def shouldRecord(self, *args):
        try:
            return self.widget.isOpen()
        except IndexOutOfBoundsException: # seems to throw this if it's all finished
            return False
        
    @classmethod
    def getAssociatedSignal(cls, widget):
        return "Close"


class WidgetMonitor:
    botClass = swtbot.SWTBot
    swtbotMap = { swt.widgets.MenuItem : swtbot.widgets.SWTBotMenu,
                  swt.widgets.Shell    : swtbot.widgets.SWTBotShell,
                  swt.widgets.ToolItem : swtbot.widgets.SWTBotToolbarPushButton }
    def __init__(self):
        self.bot = self.botClass()

    def forceShellActive(self):
        runOnUIThread(self.bot.getFinder().getShells()[0].forceActive)

    def findAllWidgets(self):
        matcher = IsAnything()
        widgets = self.bot.widgets(matcher)
        menus = self.bot.getFinder().findMenus(matcher)
        widgets.addAll(menus)
        return self.makeAdapters(widgets)

    def makeAdapters(self, widgets):
        adapters = []
        for widget in widgets:
            for widgetClass in self.swtbotMap.keys():
                if isinstance(widget, widgetClass):
                    swtbotClass = self.swtbotMap.get(widgetClass)
                    try:
                        adapters.append(WidgetAdapter(swtbotClass(widget)))
                    except:
                        raise
        return adapters

    def describe(self, describer):
        try:
            activeShell = self.bot.getFinder().activeShell()
            runOnUIThread(describer.describe, activeShell)
        except IndexOutOfBoundsException:
            pass # probably we have already exited, don't bother with a description


eventTypes =  [ (swtbot.widgets.SWTBotMenu              , [ ItemEvent ]),
                (swtbot.widgets.SWTBotShell             , [ ShellCloseEvent ]),
                (swtbot.widgets.SWTBotToolbarPushButton , [ ItemEvent ])]
